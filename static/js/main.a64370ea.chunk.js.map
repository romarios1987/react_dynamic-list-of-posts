{"version":3,"sources":["api-service.ts","components/User.tsx","components/Comments/Comment.tsx","components/Comments/CommentsList.tsx","components/Posts/Post.tsx","components/Posts/PostList.tsx","App.tsx","index.tsx"],"names":["getData","url","fetch","then","response","json","User","props","user","name","email","address","city","street","zipcode","href","Comment","comment","body","className","CommentList","comments","map","key","id","Post","post","title","PostList","postList","App","useState","posts","setPosts","isLoading","setLoading","query","setQuery","filterQuery","setFilterQuery","visiblePosts","useMemo","initialPosts","filter","pattern","RegExp","trim","test","filterPosts","setFilterQueryWithDebonce","useCallback","debounce","length","type","value","placeholder","onChange","event","target","onClick","Promise","all","usersFromApi","postsFromApi","commentsFromApi","newPosts","find","item","userId","postId","catch","disabled","ReactDOM","render","document","getElementById"],"mappings":"+OAGMA,EAAU,SAAIC,GAClB,OAAOC,MAHO,uCAGSD,GAAKE,MAAK,SAACC,GAAD,OAAcA,EAASC,WCE7CC,EAAkB,SAACC,GAAW,IAAD,EAWpCA,EATFC,KACEC,EAHoC,EAGpCA,KACAC,EAJoC,EAIpCA,MAJoC,IAKpCC,QACEC,EANkC,EAMlCA,KACAC,EAPkC,EAOlCA,OACAC,EARkC,EAQlCA,QAKN,OACE,6BACE,2BACE,4CADF,UAEML,EAFN,KAGE,uBAAGM,KAAI,iBAAYL,IAAUA,IAE/B,iCACE,wCADF,UAEMI,EAFN,aAEkBD,EAFlB,aAE6BD,MCtBtBI,EAAqB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3BR,EAAsBQ,EAAtBR,KAAMC,EAAgBO,EAAhBP,MAAOQ,EAASD,EAATC,KAErB,OACE,wBAAIC,UAAU,iCACZ,wBAAIA,UAAU,cAAa,2BAAIV,IAC/B,2BAAIS,GACJ,uBAAGH,KAAI,iBAAYL,IAAUA,KCNtBU,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvC,OACE,wBAAIF,UAAU,WACXE,EAASC,KAAI,SAAAL,GAAO,OAAI,kBAAC,EAAD,CAASM,IAAKN,EAAQO,GAAIP,QAASA,SCFrDQ,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE9BC,EACED,EADFC,MAAOT,EACLQ,EADKR,KAAMV,EACXkB,EADWlB,KAAMa,EACjBK,EADiBL,SAGrB,OACE,yBAAKF,UAAU,OACb,wBAAIA,UAAU,cAAcQ,GAC5B,2BAAIT,GACJ,kBAAC,EAAD,CAAMV,KAAMA,IACZ,6BACA,wBAAIW,UAAU,cAAd,YACA,kBAAC,EAAD,CAAaE,SAAUA,MCZhBO,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjC,6BACGA,EAASP,KAAI,SAACI,GACb,OACE,kBAAC,EAAD,CACEH,IAAKG,EAAKF,GACVE,KAAMA,SCgFDI,G,MAnFC,WAAO,IAAD,EACMC,mBAA6B,IADnC,mBACbC,EADa,KACNC,EADM,OAEYF,oBAAS,GAFrB,mBAEbG,EAFa,KAEFC,EAFE,OAGMJ,mBAAS,IAHf,mBAGbK,EAHa,KAGNC,EAHM,OAIkBN,mBAAS,IAJ3B,mBAIbO,EAJa,KAIAC,EAJA,KAadC,EAAeC,mBACnB,kBAPkB,SAACC,EAAkCC,GACrD,IAAMC,EAAU,IAAIC,OAAOF,EAAOG,OAAQ,MAE1C,OAAOJ,EAAaC,QAAO,gBAAGhB,EAAH,EAAGA,MAAOT,EAAV,EAAUA,KAAV,OAAqB0B,EAAQG,KAAKpB,IAAUiB,EAAQG,KAAK7B,MAI9E8B,CAAYhB,EAAOM,KACzB,CAACA,EAAaN,IAGViB,EAA4BC,sBAChCC,IAASZ,EAAgB,KACzB,IA+BF,OACE,yBAAKpB,UAAU,aACb,wBAAIA,UAAU,2BAAd,yBACEa,EAAMoB,OAcJ,oCACE,2BACEC,KAAK,OACLlC,UAAU,uBACVmC,MAAOlB,EACPmB,YAAY,YACZC,SA5BU,SAACC,GACrBpB,EAASoB,EAAMC,OAAOJ,OACtBL,EAA0BQ,EAAMC,OAAOJ,UA4B/B,kBAAC,EAAD,CAAUzB,SAAUW,KApBtB,oCACE,4BACEa,KAAK,SACLlC,UAAU,iBACVwC,QArCY,WACtBxB,GAAW,GACXyB,QAAQC,IAAI,CN5BP7D,EAAc,UAIdA,EAAc,UAIdA,EAAiB,eMwBnBG,MAAK,YAAoD,IAAD,mBAAjD2D,EAAiD,KAAnCC,EAAmC,KAArBC,EAAqB,KACzD7B,GAAW,GACX,IAAM8B,EAAWF,EAAazC,KAAI,SAAAI,GAChC,OAAO,2BACFA,GADL,IAEElB,KAAOsD,EAAaI,MAAK,SAAAC,GAAI,OAAIA,EAAK3C,KAAOE,EAAK0C,UAClD/C,SAAU2C,EAAgBrB,QAAO,SAAAwB,GAAI,OAAIA,EAAKE,SAAW3C,EAAKF,WAIlES,EAASgC,MACRK,OAAM,WACPnC,GAAW,OAoBHoC,SAAUrC,GAJZ,QAQCA,GAAa,uBAAGf,UAAU,QAAb,kBCvE1BqD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.a64370ea.chunk.js","sourcesContent":["\nconst API_URL = 'https://jsonplaceholder.typicode.com';\n\nconst getData = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url).then((response) => response.json());\n};\n\nexport const getUsers = () => {\n  return getData<User>('/users');\n};\n\nexport const getPosts = () => {\n  return getData<Post>('/posts');\n};\n\nexport const getComments = () => {\n  return getData<Comment>('/comments');\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = (props) => {\n  const {\n    user: {\n      name,\n      email,\n      address: {\n        city,\n        street,\n        zipcode,\n      },\n    },\n  } = props;\n\n  return (\n    <div>\n      <p>\n        <b>Info Author: </b>\n        {`${name} `}\n        <a href={`mailto:${email}`}>{email}</a>\n      </p>\n      <address>\n        <b>Address: </b>\n        {`${zipcode}, ${street}, ${city}`}\n      </address>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <li className=\"has-background-grey-light px1\">\n      <h4 className=\"title is-4\"><b>{name}</b></h4>\n      <p>{body}</p>\n      <a href={`mailto:${email}`}>{email}</a>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <ul className=\"content\">\n      {comments.map(comment => <Comment key={comment.id} comment={comment} />)}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport { User } from '../User';\nimport { CommentList } from '../Comments/CommentsList';\n\ninterface Props {\n  post: PostWithComments;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title, body, user, comments,\n  } = post;\n\n  return (\n    <div className=\"box\">\n      <h3 className=\"title is-3\">{title}</h3>\n      <p>{body}</p>\n      <User user={user} />\n      <hr />\n      <h4 className=\"title is-4\">Comments</h4>\n      <CommentList comments={comments} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from './Post';\n\n\ninterface Props {\n  postList: PostWithComments[];\n}\n\nexport const PostList: FC<Props> = ({ postList }) => (\n  <div>\n    {postList.map((post) => {\n      return (\n        <Post\n          key={post.id}\n          post={post}\n        />\n      );\n    })}\n  </div>\n);\n","import React, {\n  FC, useState, useMemo, ChangeEvent, useCallback,\n} from 'react';\nimport debounce from 'lodash/debounce';\n\nimport { getComments, getUsers, getPosts } from './api-service';\nimport { PostList } from './components/Posts/PostList';\n\nimport './App.css';\n\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostWithComments[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterQuery, setFilterQuery] = useState('');\n\n\n  const filterPosts = (initialPosts: PostWithComments[], filter: string): PostWithComments[] => {\n    const pattern = new RegExp(filter.trim(), 'gi');\n\n    return initialPosts.filter(({ title, body }) => pattern.test(title) || pattern.test(body));\n  };\n\n  const visiblePosts = useMemo(\n    () => filterPosts(posts, filterQuery),\n    [filterQuery, posts],\n  );\n\n  const setFilterQueryWithDebonce = useCallback(\n    debounce(setFilterQuery, 1000),\n    [],\n  );\n\n  const handleLoadClick = () => {\n    setLoading(true);\n    Promise.all([\n      getUsers(),\n      getPosts(),\n      getComments(),\n    ]).then(([usersFromApi, postsFromApi, commentsFromApi]) => {\n      setLoading(false);\n      const newPosts = postsFromApi.map(post => {\n        return {\n          ...post,\n          user: (usersFromApi.find(item => item.id === post.userId) as User),\n          comments: commentsFromApi.filter(item => item.postId === post.id),\n        };\n      });\n\n      setPosts(newPosts);\n    }).catch(() => {\n      setLoading(false);\n    });\n  };\n\n\n  const searchHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setFilterQueryWithDebonce(event.target.value);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title has-text-centered\">Dynamic list of posts</h1>\n      {!posts.length\n        ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"button is-info\"\n              onClick={handleLoadClick}\n              disabled={isLoading}\n            >\n              Load\n            </button>\n            {isLoading && <p className=\"text\">Loading...</p>}\n          </>\n        ) : (\n          <>\n            <input\n              type=\"text\"\n              className=\"input is-success mb2\"\n              value={query}\n              placeholder=\"Search...\"\n              onChange={searchHandler}\n            />\n            <PostList postList={visiblePosts} />\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}